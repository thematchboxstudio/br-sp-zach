/*********************
CLEARFIXIN'
*********************/

// Contain floats: nicolasgallagher.com/micro-clearfix-hack/
.clearfix {
  zoom: 1;
	&:before, &:after { content: ""; display: table; }
	&:after { clear: both; }
}

/*********************
TOOLS
*********************/

// BORDER-BOX ALL THE THINGS! (http://paulirish.com/2012/box-sizing-border-box-ftw/)
* {
	box-sizing: border-box;
}

// http://www.zeldman.com/2012/03/01/replacing-the-9999px-hack-new-image-replacement/
.image-replacement {
	text-indent: 100%;
	white-space: nowrap;
	overflow: hidden;
}


/*********************
COLORS
Need help w/ choosing your colors? Try this site out:
http://0to255.com/
*********************/

$alert-yellow:      #ebe16f;
$alert-red:         #fbe3e4;
$alert-green:       #e6efc2;
$alert-blue:        #d5edf8;

$black:             #000;
$white:             #fafafa;
$text-color: #999;
$red: #dd191d;
$darkred: #a00000;

$redhover: darken(#a00000, 10%);



$accent: #044e89;

$bones-pink:        #f01d4f;
$bones-blue:        #1990db;

$link-color:        $accent;
$link-hover:        darken($link-color, 9%);

/*
Here's a great tutorial on how to
use color variables properly:
http://sachagreif.com/sass-color-variables/
*/



/*********************
UNITS
*********************/
$site-width: 1216px;

$margin: 1rem;
$marginhalf: (.5 * $margin);
$marginquarter: (.25 * $margin);
$margin2x: (2 * $margin);
$margin3x: (3 * $margin);
$margin4x: (4 * $margin);


// SECTION HEIGHTS
$icons-height: 372px;
$footer-height: 100px;

/*********************
BREAKPOINTS
*********************/
$phone: 1em;
$phone-landscape: 25em;
$tablet: 56em;
$desktop: 71em;



/*********************
TYPOGRAPHY
*********************/

$sans-serif:        "Helvetica Neue", Helvetica, Arial, sans-serif;
$serif:             "Georgia", Cambria, Times New Roman, Times, serif;


@mixin absolute-center($z-index: 2) {
  position: absolute;
  margin: auto;
  left: 40%;
  top: 50%;
  transform: translate(-30%, -50%);
  z-index: $z-index;
  transform-origin: 50% 50% 0;
}
/*********************
REM FALLBACK
*********************/

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@mixin rem-fallback($property, $values...) {
  $max: length($values);
  $pxValues: '';
  $remValues: '';

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $pxValues: #{$pxValues + $value*16}px;

    @if $i < $max {
      $pxValues: #{$pxValues + " "};
    }
  }

  @for $i from 1 through $max {
    $value: strip-unit(nth($values, $i));
    $remValues: #{$remValues + $value}rem;

    @if $i < $max {
      $remValues: #{$remValues + " "};
    }
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

@mixin button($primary, $secondary) {
	cursor: pointer;
	font-weight: 400;
	color: $primary;
	text-decoration: none;
	border: 3px solid $primary;
	padding: 2px 12px;
	display: inline-block;
	margin: 1rem auto;
	letter-spacing: .05em;
	@include hovers(.2s);
	&:hover {
		background: $primary;
		color: $secondary;
	}
}


@mixin plus($plus-size: 56px, $border-size: 2px, $color: $black) {
	width: $plus-size;
	height: $plus-size;
	position: relative;
	&:before {
		content: "";
		display: block;
		position: absolute;
		height: calc(50% - #{$border-size});
		width: calc(50% - #{$border-size});
		border-bottom: $border-size solid $color;
		border-right: $border-size solid $color;
	}
	&:after {
		content: "";
		display: block;
		position: absolute;
		top: calc(50% - #{$border-size});
		right: 0;
		height: calc(50% - #{$border-size});
		width: 50%;
		border-top: $border-size solid $color;
		border-left: $border-size solid $color;
	}
}


/*********************
TRANISTION
*********************/

/*
I totally rewrote this to be cleaner and easier to use.
You'll need to be using Sass 3.2+ for these to work.
Thanks to @anthonyshort for the inspiration on these.
USAGE: @include transition(all 0.2s ease-in-out);
*/
@mixin hovers($time: .2s, $function: ease-in-out, $property: all ) {
	transition: $property $time $function;
}


// Fade In add classes 'fade-in'
/* make keyframes that tell the start state and the end state of our object */
@-webkit-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
@-moz-keyframes fadeIn { from { opacity:0; } to { opacity:1; } }
@keyframes fadeIn { from { opacity:0; } to { opacity:1; } }

.fade-in {
    opacity:0;  /* make things invisible upon start */
    -webkit-animation:fadeIn ease-out 1;  /* call our keyframe named fadeIn, use animattion ease-in and repeat it only 1 time */
    -moz-animation:fadeIn ease-out 1;
    animation:fadeIn ease-out 1;

    -webkit-animation-fill-mode:forwards;  /* this makes sure that after animation is done we remain at the last keyframe value (opacity: 1)*/
    -moz-animation-fill-mode:forwards;
    animation-fill-mode:forwards;

    -webkit-animation-duration:.6s;
    -moz-animation-duration:.6s;
    animation-duration:.6s;
}

.fade-in {
-webkit-animation-delay: .35s;
-moz-animation-delay: .35s;
animation-delay: .35s;
}

.two {
-webkit-animation-delay: .01s;
-moz-animation-delay: .01s;
animation-delay: .01s;
}

$duration-fast: .25s;
$duration: .5s;
$duration-slow: .75s;
$duration-slowest: 1s;

.animated{
	animation-fill-mode:both;
	animation-duration: $duration;
}// animated

// .animated.hinge {
// 	animation-duration: $duration;
// }//animated.hinge

.animated-slow {
	animation-fill-mode:both;
	animation-duration:$duration-slow;
}// animated-slow





@keyframes fadeIn {
	0% {opacity: 0;}
	100% {opacity: 1;}
}

.fadeIn {
	//animation-name: fadeIn;
	&.icon:nth-of-type(1) {
		//animation-delay: 1s;
	}
	@for $i from 1 through 50 {
	   &.icon:nth-of-type(#{$i}) {
	   		animation-delay: #{$i*.25s  + 1.15s};
	   }
	}
	// &.flag:nth-of-type(1) {
	// 	animation-delay: 0s;
	// }
}

.fadeInUp {
		@for $i from 1 through 50 {
	   &.icon:nth-of-type(#{$i}) {
	   		animation-delay: (#{$i*0.125s});
	   }
	}
}

.animated-slowest {
	animation-fill-mode:both;
	animation-duration:$duration-slowest;
	&:nth-of-type(1) {
		animation-delay: $duration-fast;
	}
}// animated-slow





/*********************
CSS3 GRADIENTS
Be careful with these since they can
really slow down your CSS. Don't overdue it.
*********************/

/* @include css-gradient(#dfdfdf,#f8f8f8); */
@mixin css-gradient($from: #dfdfdf, $to: #f8f8f8) {
	background-color: $to;
	background-image: -webkit-gradient(linear, left top, left bottom, from($from), to($to));
	background-image: -webkit-linear-gradient(top, $from, $to);
	background-image: -moz-linear-gradient(top, $from, $to);
	background-image: -o-linear-gradient(top, $from, $to);
	background-image: linear-gradient(to bottom, $from, $to);
}

@mixin transform($value){
	-webkit-transform: $value;
	-moz-transform:    $value;
	-ms-transform:     $value;
	-o-transform:      $value;
	transform:         $value;
}


@mixin transition($transition-property, $transition-time, $method) {
    -webkit-transition: $transition-property $transition-time $method;
    -moz-transition: $transition-property $transition-time $method;
    -ms-transition: $transition-property $transition-time $method;
    -o-transition: $transition-property $transition-time $method;
    transition: $transition-property $transition-time $method;
}


// @mixin fade-in($i){
// 	@keyframes fadeIn {
// 	0% {opacity: 0;}
// 	100% {opacity: 1;}
// 	}

// 	.fadeIn {
// 		animation-name: fadeIn;

// 		@for $i from 1 through 50 {
// 			&:nth-of-type(#{$i}) {
// 			animation-delay: (#{$i*0.05s});
// 			}
// 		}


// 	}
// }


